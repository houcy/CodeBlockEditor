[
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "time",
        "text": 1
      }
    ],
    "message0": "wait %1 secs",
    "canRun": false,
    "colour": "#d83b01",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "say(\"hi\")\nwait(1)\nsay(\"bye\", 1)\n",
        "canRun": true
      },
      {
        "desc": "Waiting for the next clock cycle",
        "code": "while(true) do\n    if(isKeyPressed(\"space\")) then\n        say(\"space is pressed\", 1)\n    end\n    wait()\nend\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "wait",
    "category": "Control",
    "func_description": "wait(%s)"
  },
  {
    "func_description": "for i=1, %d do\\n%send",
    "message0": "重复%1次",
    "canRun": false,
    "colour": "#d83b01",
    "arg1": [
      {
        "name": "input",
        "type": "input_statement"
      }
    ],
    "category": "Control",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "for i=1, 10 do\n    moveForward(0.1)\nend\n",
        "canRun": true
      }
    ],
    "arg0": [
      {
        "type": "field_number",
        "name": "times",
        "text": 10
      }
    ],
    "nextStatement": true,
    "type": "repeat",
    "message1": "%1",
    "helpUrl": ""
  },
  {
    "func_description": "while(true)do\\n    if(%s)then\\n        return\\n    end\\n%send",
    "message0": "重复一直到%1",
    "canRun": false,
    "colour": "#d83b01",
    "arg1": [
      {
        "name": "input",
        "type": "input_statement"
      }
    ],
    "category": "Control",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "while(true)do\n    if(condition)then\n        return;\n    end\n    moveForward(0.01)\nend\n",
        "canRun": true
      }
    ],
    "arg0": [
      {
        "name": "expression",
        "type": "input_value"
      }
    ],
    "nextStatement": true,
    "type": "repeat_until",
    "message1": "%1",
    "helpUrl": ""
  },
  {
    "func_description": "while(true) do\\n%send",
    "message0": "forever%1",
    "canRun": false,
    "colour": "#d83b01",
    "arg1": [
      {
        "name": "input",
        "type": "input_statement"
      }
    ],
    "category": "Control",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "while(true) do\n    moveForward(0.01)\nend\n",
        "canRun": true
      }
    ],
    "arg0": [
      {
        "name": "label_dummy",
        "type": "input_dummy"
      }
    ],
    "nextStatement": true,
    "type": "forever",
    "message1": "%1",
    "helpUrl": ""
  },
  {
    "func_description": "if(%s) then\\n%send",
    "message0": "如果%1那么",
    "canRun": false,
    "colour": "#d83b01",
    "arg1": [
      {
        "type": "input_statement",
        "name": "input_true",
        "text": ""
      }
    ],
    "category": "Control",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "\n",
        "canRun": true
      }
    ],
    "arg0": [
      {
        "name": "expression",
        "type": "input_value"
      }
    ],
    "nextStatement": true,
    "type": "control_if",
    "message1": "%1",
    "helpUrl": ""
  },
  {
    "message3": "%1",
    "func_description": "if(%s) then\\n%selse\\n%send",
    "message0": "如果%1那么",
    "category": "Control",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "while(true) do\n    if(distanceTo(\"mouse-pointer\")<3) then\n        say(\"mouse-pointer\")\n    else\n        say(\"\")\n    end\n    wait(0.01)\nend\n",
        "canRun": true
      }
    ],
    "nextStatement": true,
    "arg3": [
      {
        "type": "input_statement",
        "name": "input_else",
        "text": ""
      }
    ],
    "arg1": [
      {
        "type": "input_statement",
        "name": "input_true",
        "text": ""
      }
    ],
    "helpUrl": "",
    "message2": "否则",
    "colour": "#d83b01",
    "type": "if_else",
    "message1": "%1",
    "canRun": false,
    "arg0": [
      {
        "name": "expression",
        "type": "input_value"
      }
    ]
  },
  {
    "func_description": "for %s, %s in pairs(%s) do\\n%send",
    "message0": "每个%1,%2在%3",
    "canRun": false,
    "colour": "#d83b01",
    "arg1": [
      {
        "type": "input_statement",
        "name": "input",
        "text": ""
      }
    ],
    "category": "Control",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "myData = {\n    key1=\"value1\", \n    key2=\"value2\",\n    key2=\"value2\",\n}\nfor k, v in pairs(myData) do\n    say(v, 1);\nend\n",
        "canRun": true
      }
    ],
    "arg0": [
      {
        "type": "field_input",
        "name": "key",
        "text": "key"
      },
      {
        "type": "field_input",
        "name": "value",
        "text": "value"
      },
      {
        "type": "field_input",
        "name": "data",
        "text": "data"
      }
    ],
    "nextStatement": true,
    "type": "forKeyValue",
    "message1": "%1",
    "helpUrl": ""
  },
  {
    "func_description": "for %s, %s in ipairs(%s) do\\n%send",
    "message0": "每个%1,%2在数组%3",
    "canRun": false,
    "colour": "#d83b01",
    "arg1": [
      {
        "type": "input_statement",
        "name": "input",
        "text": ""
      }
    ],
    "category": "Control",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "myData = {\n    {x=1, y=0, z=0, duration=0.5},\n    {x=0, y=0, z=1, duration=0.5},\n    {x=-1, y=0, z=-1, duration=1},\n}\nfor i, item in ipairs(myData) do\n    move(item.x, item.y, item.z, item.duration)\nend\n",
        "canRun": true
      }
    ],
    "arg0": [
      {
        "type": "field_input",
        "name": "i",
        "text": "index"
      },
      {
        "type": "field_input",
        "name": "item",
        "text": "item"
      },
      {
        "type": "field_input",
        "name": "data",
        "text": "data"
      }
    ],
    "nextStatement": true,
    "type": "forIndexValue",
    "message1": "%1",
    "helpUrl": ""
  },
  {
    "func_description": "run(function()\\n%send)",
    "color": "#00cc00",
    "canRun": false,
    "colour": "#d83b01",
    "message0": "并行执行",
    "arg1": [
      {
        "type": "input_statement",
        "name": "input",
        "text": ""
      }
    ],
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "run(function()\n    say(\"follow mouse pointer!\")\n    while(true) do\n        if(distanceTo(\"mouse-pointer\") < 7) then\n            turnTo(\"mouse-pointer\");\n        elseif(distanceTo(\"@p\") > 14) then\n            moveTo(\"@p\")\n        end\n    end\nend)\nrun(function()\n    while(true) do\n        moveForward(0.02)\n    end\nend)\n",
        "canRun": true
      }
    ],
    "category": "Control",
    "nextStatement": true,
    "type": "run",
    "message1": "%1",
    "helpUrl": ""
  },
  {
    "arg0": [],
    "message0": "exit",
    "canRun": true,
    "colour": "#d83b01",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "say(\"Press X key to exit\")\nregisterKeyPressedEvent(\"x\", function()\n    exit()\nend)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "exit",
    "category": "Control",
    "func_description": "exit()"
  },
  {
    "arg0": [],
    "message0": "restart",
    "canRun": true,
    "colour": "#d83b01",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "say(\"Press X key to restart\")\nregisterKeyPressedEvent(\"x\", function()\n    restart()\nend)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "restart",
    "category": "Control",
    "func_description": "restart()"
  },
  {
    "arg0": [
      {
        "type": "field_input",
        "name": "name",
        "text": "@p"
      }
    ],
    "color": "#cc0000",
    "canRun": false,
    "colour": "#d83b01",
    "func_description": "becomeAgent(\"%s\")",
    "previousStatement": true,
    "examples": [
      {
        "desc": "become agent of current player",
        "code": "becomeAgent(\"@p\")\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "becomeAgent",
    "category": "Control",
    "message0": "become %1's agent"
  },
  {
    "arg0": [
      {
        "variableTypes": [ "" ],
        "variable": "item",
        "type": "field_variable",
        "name": "var",
        "text": "key"
      },
      {
        "type": "input_value",
        "name": "value",
        "text": "value"
      }
    ],
    "message0": "set local variable%1 to%2",
    "canRun": false,
    "colour": "#459197",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "local key = \"value\"\nsay(key, 1)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "setLocalVariable",
    "category": "Data",
    "func_description": "local %s = %s"
  },
  {
    "func_description": "%s",
    "message0": "get local variable %1",
    "category": "Data",
    "output": { "type": "null" },
    "examples": [
      {
        "desc": "",
        "code": "local key = \"value\"\nsay(key, 1)\n",
        "canRun": true
      }
    ],
    "colour": "#459197",
    "canRun": false,
    "type": "getLocalVariable",
    "helpUrl": "",
    "arg0": [
      {
        "variableTypes": [ "" ],
        "variable": "item",
        "type": "field_variable",
        "name": "var",
        "text": "key"
      }
    ]
  },
  {
    "arg0": [
      {
        "type": "field_input",
        "name": "key",
        "text": "score"
      },
      {
        "type": "field_input",
        "name": "value",
        "text": "1"
      }
    ],
    "message0": "Set variable %1 to %2",
    "canRun": true,
    "colour": "#459197",
    "previousStatement": true,
    "examples": [
      {
        "desc": "Can also use _G.a",
        "code": "_G.a = _G.a or 1\nwhile(true) do\n    _G.a = a + 1\n    set(\"a\", get(\"a\") + 1)\n    say(a)\nend\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "set",
    "category": "Data",
    "func_description": "set(\"%s\", \"%s\")"
  },
  {
    "arg0": [
      {
        "type": "field_input",
        "name": "name",
        "text": "score"
      }
    ],
    "message0": "show global variable %1",
    "canRun": true,
    "colour": "#459197",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "_G.score = 1\n_G.msg = \"hello\"\nshowVariable(\"score\", \"Your Score\")\nshowVariable(\"msg\", \"\", \"#ff0000\")\nwhile(true) do\n   _G.score = _G.score + 1\n   wait(0.01)\nend\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "showVariable",
    "category": "Data",
    "func_description": "showVariable(\"%s\")"
  },
  {
    "arg0": [
      {
        "type": "field_input",
        "name": "name",
        "text": "score"
      }
    ],
    "message0": "hide global variable %1",
    "canRun": true,
    "colour": "#459197",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "_G.score = 1\nshowVariable(\"score\")\nwait(1);\nhideVariable(\"score\")\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "hideVariable",
    "category": "Data",
    "func_description": "hideVariable(\"%s\")"
  },
  {
    "func_description": "registerCloneEvent(function()\\n%send)",
    "color": "#cc0000",
    "canRun": false,
    "colour": "#459197",
    "message0": "当角色被复制时",
    "arg1": [
      {
        "type": "input_statement",
        "name": "input",
        "text": ""
      }
    ],
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "registerCloneEvent(function(msg)\n    move(msg or 1, 0, 0, 0.5)\n    wait(1)\n    delete()\nend)\nclone()\nclone(\"myself\", 2)\nclone(\"myself\", 3)\n",
        "canRun": true
      }
    ],
    "category": "Data",
    "nextStatement": true,
    "type": "registerCloneEvent",
    "message1": "%1",
    "helpUrl": ""
  },
  {
    "arg0": [
      {
        "type": "field_dropdown",
        "name": "input",
        "options": [
          [ "this actor", "myself" ],
          [ "a given actor", "" ]
        ]
      }
    ],
    "message0": "clone %1",
    "canRun": false,
    "colour": "#459197",
    "func_description": "clone(\"%s\")",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "registerClickEvent(function()\n    move(1,0,0, 0.5)\nend)\nclone()\nclone()\nsay(\"click\")\n",
        "canRun": true
      }
    ],
    "color": "#cc0000",
    "nextStatement": true,
    "type": "clone",
    "category": "Data",
    "helpUrl": ""
  },
  {
    "arg0": [],
    "color": "#cc0000",
    "canRun": false,
    "colour": "#459197",
    "func_description": "delete()",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "move(1,0)\nsay(\"Default actor will be deleted!\", 1)\ndelete()\nregisterCloneEvent(function()\n    say(\"This clone will be deleted!\", 1)\n    delete()\nend)\nfor i=1, 100 do\n    clone()\n    wait(2)\nend\n",
        "canRun": true
      }
    ],
    "category": "Data",
    "nextStatement": true,
    "type": "delete",
    "message0": "delete this clone",
    "helpUrl": ""
  },
  {
    "arg0": [
      {
        "type": "field_dropdown",
        "name": "key",
        "options": [
          [ "name", "name" ],
          [ "physics radius", "physicsRadius" ],
          [ "physics height", "physicsHeight" ],
          [ "Color", "color" ],
          [ "text", "text" ],
          [ "any variable", "" ]
        ]
      },
      {
        "type": "field_input",
        "name": "value",
        "text": "actor1"
      }
    ],
    "message0": "set actor data %1 to %2",
    "canRun": false,
    "colour": "#459197",
    "func_description": "setActorValue(\"%s\", \"%s\")",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "registerCloneEvent(function(name)\n    setActorValue(\"name\", name)\n    moveForward(1);\nend)\nregisterClickEvent(function()\n    local myname = getActorValue(\"name\")\n    say(\"my name is \"..myname)\nend)\nsetActorValue(\"name\", \"Default\")\nsetActorValue(\"color\", \"#ff0000\")\nclone(\"myself\", \"Cloned\")\nsay(\"click us!\")\n",
        "canRun": true
      }
    ],
    "color": "#cc0000",
    "nextStatement": true,
    "type": "setActorValue",
    "category": "Data",
    "helpUrl": ""
  },
  {
    "func_description": "getActorValue(\"%s\")",
    "message0": "get actor data %1",
    "category": "Data",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "registerCloneEvent(function(msg)\n    setActorValue(\"name\", msg.name)\n    moveForward(msg.dist);\nend)\nregisterClickEvent(function()\n    local myname = getActorValue(\"name\")\n    say(\"my name is \"..myname)\nend)\nsetActorValue(\"name\", \"Default\")\nclone(\"myself\", {name = \"clone1\", dist=1})\nclone(nil, {name = \"clone2\", dist=2})\nsay(\"click us!\")\n",
        "canRun": true
      }
    ],
    "colour": "#459197",
    "canRun": false,
    "type": "getActorValue",
    "helpUrl": "",
    "arg0": [
      {
        "type": "field_dropdown",
        "name": "key",
        "options": [
          [ "name", "name" ],
          [ "physics radius", "physicsRadius" ],
          [ "physics height", "physicsHeight" ],
          [ "Color", "color" ],
          [ "is agent", "isAgent" ],
          [ "any variable", "" ]
        ]
      }
    ]
  },
  {
    "arg0": [
      {
        "type": "field_input",
        "name": "obj",
        "text": "hello"
      }
    ],
    "message0": "output log %1",
    "canRun": true,
    "colour": "#459197",
    "previousStatement": true,
    "examples": [
      {
        "desc": "Check log.txt or F11 to see the log",
        "code": "log(123)\nlog(\"hello\")\nsomething = {any=\"object\"}\nlog(something)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "log",
    "category": "Data",
    "func_description": "log(\"%s\")"
  },
  {
    "arg0": [
      {
        "type": "field_input",
        "name": "obj",
        "text": "hello"
      }
    ],
    "message0": "echo to chat window%1",
    "canRun": true,
    "colour": "#459197",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "echo(123)\necho(\"hello\")\nsomething = {any=\"object\"}\necho(something)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "echo",
    "category": "Data",
    "func_description": "echo(\"%s\")"
  },
  {
    "func_description": "registerClickEvent(function()\\n%send)",
    "arg1": [
      {
        "type": "input_statement",
        "name": "input",
        "text": ""
      }
    ],
    "canRun": false,
    "colour": "#764bcc",
    "message0": "当演员被点击时",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "registerClickEvent(function()\n    for i=1, 20 do\n        scale(10)\n    end\n    for i=1, 20 do\n        scale(-10)\n    end\nend)\n",
        "canRun": true
      }
    ],
    "category": "Events",
    "nextStatement": true,
    "type": "registerClickEvent",
    "message1": "%1",
    "helpUrl": ""
  },
  {
    "func_description": "registerKeyPressedEvent(\"%s\", function()\\n%send)",
    "message0": "当%1键按下时",
    "canRun": false,
    "colour": "#764bcc",
    "arg1": [
      {
        "type": "input_statement",
        "name": "input",
        "text": ""
      }
    ],
    "category": "Events",
    "previousStatement": true,
    "examples": [
      {
        "desc": "Space key to jump",
        "code": "registerKeyPressedEvent(\"space\",function()\n    say(\"Jump!\", 1)\n    move(0,1,0, 0.5)\n    move(0,-1,0, 0.5)\n    walkForward(0)\nend)\n",
        "canRun": true
      }
    ],
    "arg0": [
      {
        "type": "field_dropdown",
        "name": "keyname",
        "options": [
          [ "space", "space" ],
          [ "left", "left" ],
          [ "right", "right" ],
          [ "up", "up" ],
          [ "down", "down" ],
          [ "ESC", "escape" ],
          [ "a", "a" ],
          [ "b", "b" ],
          [ "c", "c" ],
          [ "d", "d" ],
          [ "e", "e" ],
          [ "f", "f" ],
          [ "g", "g" ],
          [ "h", "h" ],
          [ "i", "i" ],
          [ "j", "j" ],
          [ "k", "k" ],
          [ "l", "l" ],
          [ "m", "m" ],
          [ "n", "n" ],
          [ "o", "o" ],
          [ "p", "p" ],
          [ "q", "q" ],
          [ "r", "r" ],
          [ "s", "s" ],
          [ "t", "t" ],
          [ "u", "u" ],
          [ "v", "v" ],
          [ "w", "w" ],
          [ "x", "x" ],
          [ "y", "y" ],
          [ "z", "z" ],
          [ "1", "1" ],
          [ "2", "2" ],
          [ "3", "3" ],
          [ "4", "4" ],
          [ "5", "5" ],
          [ "6", "6" ],
          [ "7", "7" ],
          [ "8", "8" ],
          [ "9", "9" ],
          [ "0", "0" ],
          [ "f1", "f1" ],
          [ "f2", "f2" ],
          [ "f3", "f3" ],
          [ "f4", "f4" ],
          [ "f5", "f5" ],
          [ "f6", "f6" ],
          [ "f7", "f7" ],
          [ "f8", "f8" ],
          [ "f9", "f9" ],
          [ "f10", "f10" ],
          [ "f11", "f11" ],
          [ "f12", "f12" ],
          [ "enter", "return" ],
          [ "-", "minus" ],
          [ "+", "equal" ],
          [ "back", "back" ],
          [ "tab", "tab" ],
          [ "lctrl", "lcontrol" ],
          [ "lshift", "lshift" ],
          [ "lalt", "lmenu" ],
          [ "num0", "numpad0" ],
          [ "num1", "numpad1" ],
          [ "num2", "numpad2" ],
          [ "num3", "numpad3" ],
          [ "num4", "numpad4" ],
          [ "num5", "numpad5" ],
          [ "num6", "numpad6" ],
          [ "num7", "numpad7" ],
          [ "num8", "numpad8" ],
          [ "num9", "numpad9" ]
        ]
      }
    ],
    "nextStatement": true,
    "type": "registerKeyPressedEvent",
    "message1": "%1",
    "helpUrl": ""
  },
  {
    "func_description": "registerAnimationEvent(%d, function()\\n%send)",
    "message0": "当动画在%1帧时",
    "canRun": false,
    "colour": "#764bcc",
    "arg1": [
      {
        "type": "input_statement",
        "name": "input",
        "text": ""
      }
    ],
    "category": "Events",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "registerAnimationEvent(10, function()\n    say(\"anim started\", 3)\nend)\nregisterAnimationEvent(1000, function()\n    say(\"anim stopped\", 1)\nend)\nregisterClickEvent(function()\n    play(10, 1000)\nend);\nsay(\"click me!\")\n",
        "canRun": true
      }
    ],
    "arg0": [
      {
        "type": "field_number",
        "name": "time",
        "text": 1000
      }
    ],
    "nextStatement": true,
    "type": "registerAnimationEvent",
    "message1": "%1",
    "helpUrl": ""
  },
  {
    "colour": "#764bcc",
    "arg0": [
      {
        "type": "field_variable",
        "variableTypes": [ "broadcast_msg" ],
        "name": "msg",
        "variable": "msg1"
      }
    ],
    "arg1": [
      {
        "type": "input_statement",
        "name": "input",
        "text": ""
      }
    ],
    "helpUrl": "",
    "func_description": "registerBroadcastEvent(\"%s\", function(fromName)\\n%send)",
    "category": "Events",
    "color": "#00cc00",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "registerBroadcastEvent(\"jump\", function(fromName)\n    move(0,1,0)\n    wait(1)\n    move(0,-1,0)\nend)\nregisterClickEvent(function()\n    broadcastAndWait(\"jump\")\n    say(\"That was fun!\", 2)\nend)\nsay(\"click to jump!\")\n",
        "canRun": true
      }
    ],
    "canRun": false,
    "nextStatement": true,
    "type": "registerBroadcastEvent",
    "message1": "%1",
    "message0": "当收到%1消息时"
  },
  {
    "arg0": [
      {
        "type": "field_variable",
        "variableTypes": [ "broadcast_msg" ],
        "name": "msg",
        "variable": "msg1"
      }
    ],
    "message0": "broadcast %1",
    "canRun": false,
    "colour": "#764bcc",
    "func_description": "broadcast(\"%s\")",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "registerBroadcastEvent(\"hello\", function(msg)\n    say(\"hello\"..msg)\n    move(0,1,0, 0.5)\n    move(0,-1,0, 0.5)\n    say(\"bye\")\nend)\nfor i=1, 2 do\n    broadcast(\"hello\", i)\n    wait(0.5)\nend\n",
        "canRun": true
      }
    ],
    "color": "#00cc00",
    "nextStatement": true,
    "type": "broadcast",
    "category": "Events",
    "helpUrl": ""
  },
  {
    "arg0": [
      {
        "type": "field_variable",
        "variableTypes": [ "broadcast_msg" ],
        "name": "msg",
        "variable": "msg1"
      }
    ],
    "message0": "broadcast %1 and wait",
    "canRun": false,
    "colour": "#764bcc",
    "func_description": "broadcastAndWait(\"%s\")",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "registerBroadcastEvent(\"hi\", function(fromName)\n    say(\"hi,\"..tostring(fromName))\n    wait(1)\n    say(\"bye\")\n    wait(1)\nend)\nfor i=1, 2 do\n    broadcastAndWait(\"hi\")\nend\n",
        "canRun": true
      }
    ],
    "color": "#00cc00",
    "nextStatement": true,
    "type": "broadcastAndWait",
    "category": "Events",
    "helpUrl": ""
  },
  {
    "arg0": [
      {
        "type": "field_input",
        "name": "msg",
        "text": "/tip hello"
      }
    ],
    "message0": "run command %1",
    "canRun": false,
    "colour": "#764bcc",
    "func_description": "cmd(\"%s\")",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "cmd(\"/setblock ~0 ~0 ~1 62\")\ncmd(\"/cameradist 12\")\ncmd(\"/camerayaw 0\")\ncmd(\"/camerapitch 0.5\")\n",
        "canRun": true
      }
    ],
    "color": "#cc0000",
    "nextStatement": true,
    "type": "cmd",
    "category": "Events",
    "helpUrl": ""
  },
  {
    "arg0": [
      {
        "type": "field_input",
        "name": "text",
        "text": "hello!"
      },
      {
        "type": "field_number",
        "name": "duration",
        "text": 2
      }
    ],
    "message0": "say%1 for  %2 seconds",
    "canRun": true,
    "colour": "#7abb55",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "say(\"Jump!\", 2)\nmove(0,1,0)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "sayAndWait",
    "category": "Looks",
    "func_description": "say(\"%s\", %s)"
  },
  {
    "arg0": [
      {
        "type": "field_input",
        "name": "text",
        "text": "hello!"
      }
    ],
    "message0": "say %1",
    "canRun": true,
    "colour": "#7abb55",
    "previousStatement": true,
    "examples": [
      {
        "desc": "show dialog on top of character",
        "code": "say(\"Hello!\")\nwait(1)\nsay(\"\")\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "say",
    "category": "Looks",
    "func_description": "say(\"%s\")"
  },
  {
    "arg0": [
      {
        "type": "field_input",
        "name": "text",
        "text": "Start Game!"
      }
    ],
    "message0": "show tip %1",
    "canRun": true,
    "colour": "#7abb55",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "tip(\"Start Game in 3!\")\nwait(1)\ntip(\"Start Game in 2!\")\nwait(1)\ntip(\"Start Game in 1!\")\nwait(1)\ntip(\"\")\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "tip",
    "category": "Looks",
    "func_description": "tip(\"%s\")"
  },
  {
    "func_description": "show()",
    "message0": "show",
    "canRun": true,
    "previousStatement": true,
    "colour": "#7abb55",
    "arg0": [],
    "nextStatement": true,
    "type": "show",
    "category": "Looks",
    "helpUrl": ""
  },
  {
    "func_description": "hide()",
    "message0": "hide",
    "canRun": true,
    "previousStatement": true,
    "colour": "#7abb55",
    "arg0": [],
    "nextStatement": true,
    "type": "hide",
    "category": "Looks",
    "helpUrl": ""
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "animId",
        "text": 4
      }
    ],
    "message0": "play animation id%1",
    "canRun": true,
    "colour": "#7abb55",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "anim(4)\nmove(-2,0,0,1)\nanim(0)\n",
        "canRun": true
      },
      {
        "desc": "animation id",
        "code": "-- 0: standing\n-- 4: walking \n-- 5: running\n-- check movie block for more ids\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "anim",
    "category": "Looks",
    "func_description": "anim(%d)"
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "timeFrom",
        "text": 10
      },
      {
        "type": "field_number",
        "name": "timeTo",
        "text": 1000
      }
    ],
    "message0": "play from %1 to %2 ms",
    "canRun": true,
    "colour": "#7abb55",
    "previousStatement": true,
    "examples": [
      {
        "desc": "play animation in movie block",
        "code": "play(10, 1000)\nsay(\"No looping\", 1)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "play",
    "category": "Looks",
    "func_description": "play(%d, %d)"
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "timeFrom",
        "text": 10
      },
      {
        "type": "field_number",
        "name": "timeTo",
        "text": 1000
      }
    ],
    "message0": "play looped from %1 to %2 ms",
    "canRun": true,
    "colour": "#7abb55",
    "previousStatement": true,
    "examples": [
      {
        "desc": "play animation in movie block",
        "code": "playLoop(10, 1000)\nsay(\"Looping\", 3)\nstop()\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "playLoop",
    "category": "Looks",
    "func_description": "playLoop(%d, %d)"
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "speed",
        "text": 1
      }
    ],
    "message0": "play speed %1",
    "canRun": true,
    "colour": "#7abb55",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "playSpeed(4)\nplayLoop(0, 1000)\nsay(\"Looping\", 3)\nplaySpeed(1)\nstop()\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "playSpeed",
    "category": "Looks",
    "func_description": "playSpeed(%d)"
  },
  {
    "arg0": [],
    "message0": "stop playing",
    "canRun": true,
    "colour": "#7abb55",
    "previousStatement": true,
    "examples": [
      {
        "desc": "play/pause actor animation",
        "code": "playLoop(10, 1000)\nwait(2)\nstop()\nturn(15)\nplayLoop(10, 1000)\nwait(2)\nstop()\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "stop",
    "category": "Looks",
    "func_description": "stop()"
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "scaleDelta",
        "text": 10
      }
    ],
    "message0": "scale %1 percent",
    "canRun": true,
    "colour": "#7abb55",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "scale(50)\nwait(1)\nscale(-50)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "scale",
    "category": "Looks",
    "func_description": "scale(%d)"
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "scale",
        "text": 100
      }
    ],
    "message0": "scale to %1 percent",
    "canRun": true,
    "colour": "#7abb55",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "for i=1, 20 do\n    scale(10)\nend\nscaleTo(50)\nwait(0.5)\nscaleTo(200)\nwait(0.5)\nscaleTo(100)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "scaleTo",
    "category": "Looks",
    "func_description": "scaleTo(%d)"
  },
  {
    "arg0": [
      {
        "type": "field_dropdown",
        "name": "name",
        "options": [
          [ "this actor", "myself" ],
          [ "main player", "player" ],
          [ "a given actor name", "" ]
        ]
      }
    ],
    "message0": "lookat %1",
    "canRun": true,
    "colour": "#7abb55",
    "func_description": "focus(\"%s\")",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "focus()\nmoveForward(2,2)\nfocus(\"player\")\n",
        "canRun": true
      }
    ],
    "color": "#cc0000",
    "nextStatement": true,
    "type": "focus",
    "category": "Looks",
    "helpUrl": ""
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "dist",
        "text": 12
      },
      {
        "type": "field_number",
        "name": "pitch",
        "text": 45
      },
      {
        "type": "field_number",
        "name": "facing",
        "text": 90
      }
    ],
    "message0": "camera dist %1 pitch %2 yaw %3",
    "canRun": true,
    "colour": "#7abb55",
    "func_description": "camera(%s, %s, %s)",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "for i=1, 100 do\n    camera(10+i*0.1, nil, nil)\n    wait(0.05)\nend\n",
        "canRun": true
      }
    ],
    "color": "#cc0000",
    "nextStatement": true,
    "type": "camera",
    "category": "Looks",
    "helpUrl": ""
  },
  {
    "func_description": "getScale()",
    "message0": "scale",
    "category": "Looks",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "while(true) do\n    if(getScale() >= 200) then\n        scaleTo(100)\n    else\n        scale(10)\n    end\nend\n",
        "canRun": true
      }
    ],
    "colour": "#7abb55",
    "canRun": false,
    "type": "getScale",
    "helpUrl": "",
    "arg0": []
  },
  {
    "func_description": "getPlayTime()",
    "message0": "animation time",
    "category": "Looks",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "playLoop(10, 2000)\nwhile(true) do\n    if(getPlayTime() > 1000) then\n        say(\"hi\")\n    else\n        say(\"\")\n    end\n    wait(0.01);\nend\n",
        "canRun": true
      }
    ],
    "colour": "#7abb55",
    "canRun": false,
    "type": "getPlayTime",
    "helpUrl": "",
    "arg0": []
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "dist",
        "text": 1
      },
      {
        "type": "field_number",
        "name": "duration",
        "text": 0.5
      }
    ],
    "message0": "move forward %1 block in %2 secs",
    "canRun": true,
    "colour": "#0078d7",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "turn(30);\nfor i=1, 20 do\n    moveForward(0.05)\nend\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "moveForward",
    "category": "Motion",
    "func_description": "moveForward(%d, %d)"
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "degree",
        "text": 15
      }
    ],
    "message0": "turn %1 degree",
    "canRun": true,
    "colour": "#0078d7",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "turnTo(-60)\nfor i=1, 100 do\n    turn(-3)\nend\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "turn",
    "category": "Motion",
    "func_description": "turn(%d)"
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "degree",
        "text": 90
      }
    ],
    "message0": "turn to %1 degree direction",
    "canRun": true,
    "colour": "#0078d7",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "turnTo(-60)\nwait(1)\nturnTo(0)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "turnTo",
    "category": "Motion",
    "func_description": "turnTo(%d)"
  },
  {
    "arg0": [
      {
        "type": "field_dropdown",
        "name": "targetName",
        "options": [
          [ "mouse", "mouse-pointer" ],
          [ "the closest player", "@p" ],
          [ "a given actor name", "" ]
        ]
      }
    ],
    "message0": "turn to %1",
    "canRun": true,
    "colour": "#0078d7",
    "previousStatement": true,
    "examples": [
      {
        "desc": "turn to mouse pointer or given player",
        "code": "turnTo(\"mouse-pointer\")\nmoveForward(1, 1)\nturnTo(\"@p\")\nmoveForward(1, 1)\nturnTo(\"frog\")\nmoveForward(1, 1)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "turnToTarget",
    "category": "Motion",
    "func_description": "turnTo(\"%s\")"
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "x",
        "text": 1
      },
      {
        "type": "field_number",
        "name": "y",
        "text": 0
      },
      {
        "type": "field_number",
        "name": "z",
        "text": 0
      },
      {
        "type": "field_number",
        "name": "duration",
        "text": 0.5
      }
    ],
    "message0": "move %1 %2 %3 in %4 secs",
    "canRun": true,
    "colour": "#0078d7",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "turnTo(0)\nmove(0.5,1,0, 0.5)\nmove(1,-1,0, 0.5)\nsay(\"jump!\", 1)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "move",
    "category": "Motion",
    "func_description": "move(%s, %s, %s, %s)"
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "x"
      },
      {
        "type": "field_number",
        "name": "y"
      },
      {
        "type": "field_number",
        "name": "z"
      }
    ],
    "message0": "move to %1 %2 %3",
    "canRun": true,
    "colour": "#0078d7",
    "func_description": "moveTo(%s, %s, %s)",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "moveTo(19257,5,19174)\nmoveTo(\"mouse-pointer\")\nmoveTo(\"@p\")\nmoveTo(\"frog\")\n",
        "canRun": false
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "moveTo",
    "category": "Motion",
    "isDynamicNPLCode": true
  },
  {
    "arg0": [
      {
        "type": "field_dropdown",
        "name": "targetName",
        "options": [
          [ "mouse", "mouse-pointer" ],
          [ "the closest player", "@p" ],
          [ "a given actor name", "" ]
        ]
      }
    ],
    "message0": "move to %1",
    "canRun": true,
    "colour": "#0078d7",
    "previousStatement": true,
    "examples": [
      {
        "desc": "teleport to main player, mouse pointer, given actor",
        "code": "say(\"current player\", 1)\nmoveTo(\"@p\")\nsay(\"mouse-pointer\", 1)\nmoveTo(\"mouse-pointer\")\nsay(\"the frog actor if any\", 1)\nmoveTo(\"frog\")\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "moveToTarget",
    "category": "Motion",
    "func_description": "moveTo(\"%s\")"
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "x",
        "text": 1
      },
      {
        "type": "field_number",
        "name": "y",
        "text": 0
      },
      {
        "type": "field_number",
        "name": "z",
        "text": 0
      },
      {
        "type": "field_number",
        "name": "duration",
        "text": 0.5
      }
    ],
    "message0": "walk %1 %2 %3 for %4 seconds",
    "canRun": true,
    "colour": "#0078d7",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "walk(1,0) -- x,z\nwalk(0,1) -- x,z\nwalk(-1,0,-1) -- x,y,z\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "walk",
    "category": "Motion",
    "func_description": "walk(%s, %s, %s, %s)"
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "dist",
        "text": 1
      },
      {
        "type": "field_number",
        "name": "duration",
        "text": 0.5
      }
    ],
    "message0": "Walk forward%1 for %2 secs",
    "canRun": true,
    "colour": "#0078d7",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "turnTo(0)\nwalkForward(1)\nturn(180)\nwalkForward(1, 0.5)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "walkForward",
    "category": "Motion",
    "func_description": "walkForward(%s, %s)"
  },
  {
    "arg0": [
      {
        "type": "field_input",
        "name": "cmd_text",
        "text": "~ 5 ~"
      }
    ],
    "message0": "set velocity %1",
    "canRun": true,
    "colour": "#0078d7",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "velocity(\"~ 10 ~\")\nwait(0.3)\nvelocity(\"add 2 ~ 2\")\nwait(2)\nvelocity(\"0 0 0\")\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "velocity",
    "category": "Motion",
    "func_description": "velocity(\"%s\")"
  },
  {
    "arg0": [],
    "message0": "bounce",
    "canRun": true,
    "colour": "#0078d7",
    "previousStatement": true,
    "examples": [
      {
        "desc": "bounce when touching blocks",
        "code": "turnTo(45)\nwhile(true) do\n    moveForward(0.02)\n    if(isTouching(\"block\")) then\n        bounce()\n    end\nend\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "bounce",
    "category": "Motion",
    "func_description": "bounce()"
  },
  {
    "func_description": "getX()",
    "message0": "get X coordinate",
    "category": "Motion",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "while(true) do\n    say(getX())\nend\n",
        "canRun": true
      }
    ],
    "colour": "#0078d7",
    "canRun": false,
    "type": "getX",
    "helpUrl": "",
    "arg0": []
  },
  {
    "func_description": "getY()",
    "message0": "get Y coordinate",
    "category": "Motion",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "while(true) do\n    say(getY())\n    if(getY()<3) then\n        tip(\"Game Over!\")\n    end\nend\n",
        "canRun": true
      }
    ],
    "colour": "#0078d7",
    "canRun": false,
    "type": "getY",
    "helpUrl": "",
    "arg0": []
  },
  {
    "func_description": "getZ()",
    "message0": "get Z coordinate",
    "category": "Motion",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "while(true) do\n    say(getZ())\nend\n",
        "canRun": true
      }
    ],
    "colour": "#0078d7",
    "canRun": false,
    "type": "getZ",
    "helpUrl": "",
    "arg0": []
  },
  {
    "func_description": "getPos()",
    "message0": "actor xyz position",
    "category": "Motion",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "local x, y, z = getPos()\nsetPos(x, y+0.5, z)\n",
        "canRun": true
      }
    ],
    "colour": "#0078d7",
    "canRun": false,
    "type": "getPos",
    "helpUrl": "",
    "arg0": []
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "x"
      },
      {
        "type": "field_number",
        "name": "y"
      },
      {
        "type": "field_number",
        "name": "z"
      }
    ],
    "message0": "set actor position %1 %2 %3",
    "canRun": true,
    "colour": "#0078d7",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "local x, y, z = getPos()\nsetPos(x, y+0.5, z)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "setPos",
    "category": "Motion",
    "func_description": "setPos(%s, %s, %s)"
  },
  {
    "func_description": "getFacing()",
    "message0": "facing",
    "category": "Motion",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "while(true) do\n    say(getFacing())\nend\n",
        "canRun": true
      }
    ],
    "colour": "#0078d7",
    "canRun": false,
    "type": "getFacing",
    "helpUrl": "",
    "arg0": []
  },
  {
    "func_description": "\"%s\"",
    "message0": "\"%1\"",
    "category": "Operators",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "",
        "canRun": true
      }
    ],
    "colour": "#569138",
    "canRun": false,
    "type": "getString",
    "helpUrl": "",
    "arg0": [
      {
        "type": "field_input",
        "name": "left",
        "text": "string"
      }
    ]
  },
  {
    "func_description": "%s",
    "message0": "%1",
    "category": "Operators",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "",
        "canRun": true
      }
    ],
    "colour": "#569138",
    "canRun": false,
    "type": "getBoolean",
    "helpUrl": "",
    "arg0": [
      {
        "type": "field_dropdown",
        "name": "value",
        "options": [
          [ "true", "true" ],
          [ "false", "false" ]
        ]
      }
    ]
  },
  {
    "func_description": "%s",
    "message0": "%1",
    "category": "Operators",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "",
        "canRun": true
      }
    ],
    "colour": "#569138",
    "canRun": false,
    "type": "getNumber",
    "helpUrl": "",
    "arg0": [
      {
        "type": "field_number",
        "name": "left",
        "text": "0"
      }
    ]
  },
  {
    "func_description": "((%s) + (%s))",
    "message0": "%1 + %2 %3",
    "category": "Operators",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "+-*/ of numbers",
        "code": "say(\"1+1=?\")\nwait(1)\nsay(1+1)\n",
        "canRun": true
      }
    ],
    "colour": "#569138",
    "canRun": false,
    "type": "addition",
    "helpUrl": "",
    "arg0": [
      {
        "name": "left",
        "type": "input_value"
      },
      {
        "name": "dummy",
        "type": "input_dummy"
      },
      {
        "name": "right",
        "type": "input_value"
      }
    ]
  },
  {
    "func_description": "math.random(%s,%s)",
    "message0": "pick random %1 to %2",
    "category": "Operators",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "while(true) do\n    say(math.random(1,100))\n    wait(0.5)\nend\n",
        "canRun": true
      }
    ],
    "colour": "#569138",
    "canRun": false,
    "type": "random",
    "helpUrl": "",
    "arg0": [
      {
        "type": "field_number",
        "name": "from",
        "text": "1"
      },
      {
        "type": "field_number",
        "name": "to",
        "text": "10"
      }
    ]
  },
  {
    "func_description": "((%s) == (%s))",
    "message0": "%1 == %2 %3",
    "category": "Operators",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "Compare two values",
        "code": "while(true) do\n    a = math.random(0,10)\n    if(a==0) then\n        say(a)\n    elseif(a<=3) then\n        say(a..\"<=3\")\n    elseif(a>6) then\n        say(a..\">6\")\n    else\n        say(\"3<\"..a..\"<=6\")\n    end\n    wait(2)\nend\n",
        "canRun": true
      }
    ],
    "colour": "#569138",
    "canRun": false,
    "type": "equal",
    "helpUrl": "",
    "arg0": [
      {
        "name": "left",
        "type": "input_value"
      },
      {
        "name": "dummy",
        "type": "input_dummy"
      },
      {
        "name": "right",
        "type": "input_value"
      }
    ]
  },
  {
    "func_description": "((%s) and (%s))",
    "message0": "%1 and %2 %3",
    "category": "Operators",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "While meeting both conditions",
        "code": "while(true) do\n    a = math.random(0,10)\n    if(3<a and a<=6) then\n        say(\"3<\"..a..\"<=6\")\n    else\n        say(a)\n    end\n    wait(2)\nend\n",
        "canRun": true
      }
    ],
    "colour": "#569138",
    "canRun": false,
    "type": "and",
    "helpUrl": "",
    "arg0": [
      {
        "name": "left",
        "type": "input_value"
      },
      {
        "name": "dummy",
        "type": "input_dummy"
      },
      {
        "name": "right",
        "type": "input_value"
      }
    ]
  },
  {
    "func_description": "((%s) or (%s))",
    "message0": "%1 or %2 %3",
    "category": "Operators",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "Left or right meet the conditions",
        "code": "while(true) do\n    a = math.random(0,10)\n    if(a<=3 or a>6) then\n        say(a)\n    else\n        say(\"3<\"..a..\"<=6\")\n    end\n    wait(2)\nend\n",
        "canRun": true
      }
    ],
    "colour": "#569138",
    "canRun": false,
    "type": "or",
    "helpUrl": "",
    "arg0": [
      {
        "name": "left",
        "type": "input_value"
      },
      {
        "name": "dummy",
        "type": "input_dummy"
      },
      {
        "name": "right",
        "type": "input_value"
      }
    ]
  },
  {
    "func_description": "(not %s)",
    "message0": "not %1 %2",
    "category": "Operators",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "whether it is not true",
        "code": "while(true) do\n    a = math.random(0,10)\n    if((not (3<=a)) or (not (a>6))) then\n        say(\"3<\"..a..\"<=6\")\n    else\n        say(a)\n    end\n    wait(2)\nend\n",
        "canRun": true
      }
    ],
    "colour": "#569138",
    "canRun": false,
    "type": "not",
    "helpUrl": "",
    "arg0": [
      {
        "name": "left",
        "type": "input_value"
      },
      {
        "name": "dummy",
        "type": "input_dummy"
      }
    ]
  },
  {
    "func_description": "(\"%s\"..\"%s\")",
    "message0": "join %1 %2",
    "category": "Operators",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "say(\"hello \"..\"world\"..\"!!!\")\n",
        "canRun": true
      }
    ],
    "colour": "#569138",
    "canRun": false,
    "type": "join",
    "helpUrl": "",
    "arg0": [
      {
        "type": "field_input",
        "name": "left",
        "text": "hello"
      },
      {
        "type": "field_input",
        "name": "right",
        "text": "world"
      }
    ]
  },
  {
    "func_description": "(#\"%s\")",
    "message0": "length of %1",
    "category": "Operators",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "say(\"length of hello is \"..(#\"hello\"));\n",
        "canRun": true
      }
    ],
    "colour": "#569138",
    "canRun": false,
    "type": "lengthOf",
    "helpUrl": "",
    "arg0": [
      {
        "type": "field_input",
        "name": "left",
        "text": "hello"
      }
    ]
  },
  {
    "func_description": "(%s%%s)",
    "message0": "%1 mod %2",
    "category": "Operators",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "say(\"66%10==\"..(66%10))\n",
        "canRun": true
      }
    ],
    "colour": "#569138",
    "canRun": false,
    "type": "mod",
    "helpUrl": "",
    "arg0": [
      {
        "type": "field_number",
        "name": "left",
        "text": "66"
      },
      {
        "type": "field_number",
        "name": "right",
        "text": "10"
      }
    ]
  },
  {
    "func_description": "math.floor(%s+0.5)",
    "message0": "round %1",
    "category": "Operators",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "while(true) do\n    a = math.random(0,10) / 10\n    b = math.floor(a+0.5)\n    say(a..\"=>\"..b)\n    wait(2)\nend\n",
        "canRun": true
      }
    ],
    "colour": "#569138",
    "canRun": false,
    "type": "round",
    "helpUrl": "",
    "arg0": [
      {
        "type": "field_number",
        "name": "left",
        "text": 5.5
      }
    ]
  },
  {
    "func_description": "math.%s(%s)",
    "message0": "%1 %2",
    "category": "Operators",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "say(\"math.sqrt(9)==\"..math.sqrt(9), 1)\nsay(\"math.cos(1)==\"..math.cos(1), 1)\nsay(\"math.abs(-1)==\"..math.abs(1), 1)\n",
        "canRun": true
      }
    ],
    "colour": "#569138",
    "canRun": false,
    "type": "math.sqrt",
    "helpUrl": "",
    "arg0": [
      {
        "type": "field_dropdown",
        "name": "name",
        "options": [
          [ "sqrt", "sqrt" ],
          [ "sin", "sin" ],
          [ "cos", "cos" ],
          [ "abs", "abs" ],
          [ "asin", "asin" ],
          [ "acos", "acos" ],
          [ "ceiling", "ceil" ],
          [ "floor", "floor" ],
          [ "tab", "tan" ],
          [ "atan", "atan" ],
          [ "sin", "exp" ],
          [ "log10", "log10" ],
          [ "exp", "exp" ]
        ]
      },
      {
        "type": "field_number",
        "name": "left",
        "text": 9
      }
    ]
  },
  {
    "func_description": "isTouching(\"%s\")",
    "message0": "touching %1 ?",
    "category": "Sensing",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "touching blocks or actors?",
        "code": "turnTo(45)\nwhile(true) do\n    moveForward(0.1)\n    if(isTouching(62)) then\n        say(\"grass block!\", 1)\n    elseif(isTouching(\"block\")) then\n        bounce()\n    elseif(isTouching(\"box\")) then\n        bounce()\n    end\nend\n",
        "canRun": true
      }
    ],
    "colour": "#69b090",
    "canRun": false,
    "type": "isTouching",
    "helpUrl": "",
    "arg0": [
      {
        "type": "field_dropdown",
        "name": "input",
        "options": [
          [ "blocks", "block" ],
          [ "nearby player", "@a" ],
          [ "a given block id", "62" ],
          [ "a given actor name", "" ]
        ]
      }
    ]
  },
  {
    "arg0": [
      {
        "type": "field_input",
        "name": "name",
        "text": "frog"
      }
    ],
    "message0": "set name to %1",
    "canRun": false,
    "colour": "#69b090",
    "previousStatement": true,
    "examples": [
      {
        "desc": "cloned actor can have different names",
        "code": "registerCloneEvent(function(name)\n    setActorValue(\"name\", name)\n    moveForward(1);\nend)\nregisterClickEvent(function()\n    local myname = getActorValue(\"name\")\n    say(\"my name is \"..myname)\nend)\nsetActorValue(\"name\", \"Default\")\nclone(\"myself\", \"Cloned\")\nsay(\"click us!\")\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "setName",
    "category": "Sensing",
    "func_description": "setActorValue(\"name\", \"%s\")"
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "radius",
        "text": 0.25
      }
    ],
    "message0": "set physics radius %1",
    "canRun": true,
    "colour": "#69b090",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "cmd(\"/show boundingbox\")\nsetBlock(getX(), getY()+2, getZ(), 62)\nsetActorValue(\"physicsRadius\", 0.5)\nsetActorValue(\"physicsHeight\", 2)\nmove(0, 0.2, 0)\nif(isTouching(\"block\")) then\n    say(\"touched!\", 1)\nend\nsetBlock(getX(), getY()+2, getZ(), 0)\nwait(2)\nmove(0, -0.2, 0)\ncmd(\"/hide boundingbox\")\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "setPhysicsRaidus",
    "category": "Sensing",
    "func_description": "setActorValue(\"physicsRadius\", %s)"
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "height",
        "text": 1
      }
    ],
    "message0": "set physics height %1",
    "canRun": true,
    "colour": "#69b090",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "cmd(\"/show boundingbox\")\nsetBlock(getX(), getY()+2, getZ(), 62)\nsetActorValue(\"physicsRadius\", 0.5)\nsetActorValue(\"physicsHeight\", 2)\nmove(0, 0.2, 0)\nif(isTouching(\"block\")) then\n    say(\"touched!\", 1)\nend\nsetBlock(getX(), getY()+2, getZ(), 0)\nwait(2)\nmove(0, -0.2, 0)\ncmd(\"/hide boundingbox\")\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "setPhysicsHeight",
    "category": "Sensing",
    "func_description": "setActorValue(\"physicsHeight\", %s)"
  },
  {
    "func_description": "registerCollisionEvent(%s, function()\\n%send)",
    "message0": "当碰到%1时",
    "canRun": false,
    "colour": "#69b090",
    "arg1": [
      {
        "type": "input_statement",
        "name": "input",
        "text": ""
      }
    ],
    "category": "Sensing",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "broadcastCollision()\nregisterCollisionEvent(\"frog\", function()\nend)\n",
        "canRun": true
      }
    ],
    "arg0": [
      {
        "type": "field_input",
        "name": "name",
        "text": "name"
      }
    ],
    "nextStatement": true,
    "type": "registerCollisionEvent",
    "message1": "%1",
    "helpUrl": ""
  },
  {
    "arg0": [],
    "message0": "broadcast touch message",
    "canRun": true,
    "colour": "#69b090",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "broadcastCollision()\nregisterCollisionEvent(\"frog\", function()\nend)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "broadcastCollision",
    "category": "Sensing",
    "func_description": "broadcastCollision()"
  },
  {
    "func_description": "distanceTo(\"%s\")",
    "message0": "distance to %1",
    "category": "Sensing",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "while(true) do\n    if(distanceTo(\"mouse-pointer\") < 3) then\n        say(\"mouse-pointer\")\n    elseif(distanceTo(\"@p\") < 10) then\n        say(\"player\")\n    elseif(distanceTo(\"@p\") > 10) then\n        say(\"nothing\")\n    end\n    wait(0.01)\nend\n",
        "canRun": true
      }
    ],
    "colour": "#69b090",
    "canRun": false,
    "type": "distanceTo",
    "helpUrl": "",
    "arg0": [
      {
        "type": "field_dropdown",
        "name": "input",
        "options": [
          [ "mouse", "mouse-pointer" ],
          [ "the closest player", "@p" ],
          [ "a given actor name", "" ]
        ]
      }
    ]
  },
  {
    "arg0": [
      {
        "type": "field_input",
        "name": "input",
        "text": "what is your name?"
      }
    ],
    "message0": "ask %1 and wait ",
    "canRun": true,
    "colour": "#69b090",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "ask(\"what is your name\")\nsay(\"hello \"..tostring(answer), 2)\n\nask(\"select your choice\", {\"choice A\", \"choice B\"})\nif(answer == 1) then\n    say(\"you choose A\")\nelseif(answer == 2) then\n    say(\"you choose B\")\nend\n",
        "canRun": true
      },
      {
        "desc": "close dialog",
        "code": "run(function()\n   wait(3)\n   ask()\nend)\nask(\"Please answer in 3 seconds\")\nsay(\"hello \"..tostring(answer), 2)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "askAndWait",
    "category": "Sensing",
    "func_description": "ask(\"%s\")"
  },
  {
    "func_description": "get(\"answer\")",
    "message0": "answer",
    "category": "Sensing",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "say(\"<div style='color:#ff0000'>Like A or B?</div>html are supported\")\nask(\"type A or B\")\nif(answer == \"A\") then\n   say(\"A is good\", 2)\nelseif(answer == \"B\") then\n   say(\"B is fine\", 2)\nelse\n   say(\"i do not understand you\", 2)\nend\n",
        "canRun": true
      }
    ],
    "colour": "#69b090",
    "canRun": false,
    "type": "answer",
    "helpUrl": "",
    "arg0": []
  },
  {
    "func_description": "isKeyPressed(\"%s\")",
    "message0": "is %1 key pressed?",
    "category": "Sensing",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "say(\"press left/right key to move me!\")\nwhile(true) do\n    if(isKeyPressed(\"left\")) then\n        move(0, 0.1)\n        say(\"\")\n    elseif(isKeyPressed(\"right\")) then\n        move(0, -0.1)\n        say(\"\")\n    end\n    wait()\nend\n",
        "canRun": true
      },
      {
        "desc": "",
        "code": "say(\"press any key to continue!\")\nwhile(true) do\n    if(isKeyPressed(\"any\")) then\n        say(\"you pressed a key!\", 2)\n    end\n    wait()\nend\n",
        "canRun": true
      },
      {
        "desc": "key list",
        "code": "\n-- numpad0,numpad1,...,numpad9\n\n",
        "canRun": true
      }
    ],
    "colour": "#69b090",
    "canRun": false,
    "type": "isKeyPressed",
    "helpUrl": "",
    "arg0": [
      {
        "type": "field_dropdown",
        "text": "space",
        "name": "input",
        "options": [
          [ "space", "space" ],
          [ "left", "left" ],
          [ "right", "right" ],
          [ "up", "up" ],
          [ "down", "down" ],
          [ "ESC", "escape" ],
          [ "a", "a" ],
          [ "b", "b" ],
          [ "c", "c" ],
          [ "d", "d" ],
          [ "e", "e" ],
          [ "f", "f" ],
          [ "g", "g" ],
          [ "h", "h" ],
          [ "i", "i" ],
          [ "j", "j" ],
          [ "k", "k" ],
          [ "l", "l" ],
          [ "m", "m" ],
          [ "n", "n" ],
          [ "o", "o" ],
          [ "p", "p" ],
          [ "q", "q" ],
          [ "r", "r" ],
          [ "s", "s" ],
          [ "t", "t" ],
          [ "u", "u" ],
          [ "v", "v" ],
          [ "w", "w" ],
          [ "x", "x" ],
          [ "y", "y" ],
          [ "z", "z" ],
          [ "1", "1" ],
          [ "2", "2" ],
          [ "3", "3" ],
          [ "4", "4" ],
          [ "5", "5" ],
          [ "6", "6" ],
          [ "7", "7" ],
          [ "8", "8" ],
          [ "9", "9" ],
          [ "0", "0" ],
          [ "f1", "f1" ],
          [ "f2", "f2" ],
          [ "f3", "f3" ],
          [ "f4", "f4" ],
          [ "f5", "f5" ],
          [ "f6", "f6" ],
          [ "f7", "f7" ],
          [ "f8", "f8" ],
          [ "f9", "f9" ],
          [ "f10", "f10" ],
          [ "f11", "f11" ],
          [ "f12", "f12" ],
          [ "enter", "return" ],
          [ "-", "minus" ],
          [ "+", "equal" ],
          [ "back", "back" ],
          [ "tab", "tab" ],
          [ "lctrl", "lcontrol" ],
          [ "lshift", "lshift" ],
          [ "lalt", "lmenu" ],
          [ "num0", "numpad0" ],
          [ "num1", "numpad1" ],
          [ "num2", "numpad2" ],
          [ "num3", "numpad3" ],
          [ "num4", "numpad4" ],
          [ "num5", "numpad5" ],
          [ "num6", "numpad6" ],
          [ "num7", "numpad7" ],
          [ "num8", "numpad8" ],
          [ "num9", "numpad9" ]
        ]
      }
    ]
  },
  {
    "func_description": "isMouseDown()",
    "message0": "mouse down?",
    "category": "Sensing",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "Click anywhere to teleport",
        "code": "say(\"click anywhere\")\nwhile(true) do\n    if(isMouseDown()) then\n        moveTo(\"mouse-pointer\")\n        wait(0.3)\n    end\nend\n",
        "canRun": true
      }
    ],
    "colour": "#69b090",
    "canRun": false,
    "type": "isMouseDown",
    "helpUrl": "",
    "arg0": []
  },
  {
    "func_description": "mousePickBlock()",
    "message0": "mouse pick",
    "category": "Sensing",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "Click anywhere to teleport",
        "code": "while(true) do\n    local x, y, z, blockid = mousePickBlock();\n    if(x) then\n        say(format(\"%s %s %s :%d\", x, y, z, blockid))\n    end\nend\n",
        "canRun": true
      }
    ],
    "colour": "#69b090",
    "canRun": false,
    "type": "mousePickBlock",
    "helpUrl": "",
    "arg0": []
  },
  {
    "func_description": "getBlock(%s, %s, %s)",
    "message0": "get block id %1 %2 %3",
    "category": "Sensing",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "local x,y,z = getPos();\nlocal id = getBlock(x,y-1,z)\nsay(\"block below is \"..id, 2)\n",
        "canRun": true
      }
    ],
    "colour": "#69b090",
    "canRun": false,
    "type": "getBlock",
    "helpUrl": "",
    "arg0": [
      {
        "type": "field_number",
        "name": "x"
      },
      {
        "type": "field_number",
        "name": "y"
      },
      {
        "type": "field_number",
        "name": "z"
      }
    ]
  },
  {
    "arg0": [
      {
        "type": "field_number",
        "name": "x"
      },
      {
        "type": "field_number",
        "name": "y"
      },
      {
        "type": "field_number",
        "name": "z"
      },
      {
        "type": "field_number",
        "name": "blockId",
        "text": "62"
      }
    ],
    "message0": "set block %1 %2 %3 to %4",
    "canRun": false,
    "colour": "#69b090",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "local x,y,z = getPos()\nlocal id = getBlock(x,y+2,z)\nsetBlock(x,y+2,z, 62)\nwait(1)\n-- 0 to delete block\nsetBlock(x,y+2,z, 0)\nsetBlock(x,y+2,z, id)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "setBlock",
    "category": "Sensing",
    "func_description": "setBlock(%s, %s, %s, %s)"
  },
  {
    "func_description": "getTimer()",
    "message0": "timer",
    "category": "Sensing",
    "output": { "type": "field_number" },
    "examples": [
      {
        "desc": "",
        "code": "resetTimer()\nwhile(getTimer()<5) do\n    moveForward(0.02)\nend\n",
        "canRun": true
      }
    ],
    "colour": "#69b090",
    "canRun": false,
    "type": "timer",
    "helpUrl": "",
    "arg0": []
  },
  {
    "arg0": [],
    "message0": "reset timer",
    "canRun": true,
    "colour": "#69b090",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "resetTimer()\nwhile(getTimer()<2) do\n    wait(0.5);\nend\nsay(\"hi\", 2)\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "resetTimer",
    "category": "Sensing",
    "func_description": "resetTimer()"
  },
  {
    "func_description": "cmd(\"/mode game\")",
    "message0": "set to game mode",
    "canRun": true,
    "previousStatement": true,
    "colour": "#69b090",
    "arg0": [],
    "nextStatement": true,
    "type": "mode",
    "category": "Sensing",
    "helpUrl": ""
  },
  {
    "func_description": "cmd(\"/mode edit\")",
    "message0": "set to edit mode",
    "canRun": true,
    "previousStatement": true,
    "colour": "#69b090",
    "arg0": [],
    "nextStatement": true,
    "type": "modeEdit",
    "category": "Sensing",
    "helpUrl": ""
  },
  {
    "arg0": [
      {
        "type": "field_dropdown",
        "name": "note",
        "options": [
          [ "7", "7" ],
          [ "6", "6" ],
          [ "5", "5" ],
          [ "4", "4" ],
          [ "3", "3" ],
          [ "2", "2" ],
          [ "1", "1" ]
        ]
      },
      {
        "type": "field_number",
        "name": "beat",
        "text": 0.25
      }
    ],
    "message0": "play note %1 for %2 beats",
    "canRun": true,
    "colour": "#8f6d40",
    "previousStatement": true,
    "examples": [
      {
        "desc": "",
        "code": "while (true) do\n    playNote(\"1\", 0.5)\n    playNote(\"2\", 0.5)\n    playNote(\"3\", 0.5)\nend\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "playNote",
    "category": "Sound",
    "func_description": "playNote(\"%s\", %s)"
  },
  {
    "arg0": [
      {
        "type": "field_dropdown",
        "name": "filename",
        "options": [
          [ "1", "1" ],
          [ "2", "2" ],
          [ "3", "3" ],
          [ "4", "4" ],
          [ "5", "5" ],
          [ "ogg file", "filename.ogg" ],
          [ "wav file", "filename.wav" ],
          [ "mp3 file", "filename.mp3" ]
        ]
      }
    ],
    "message0": "play background music %1",
    "canRun": true,
    "colour": "#8f6d40",
    "previousStatement": true,
    "examples": [
      {
        "desc": "Stop after playing music",
        "code": "playMusic(\"2\")\nwait(5)\nplayMusic()\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "playMusic",
    "category": "Sound",
    "func_description": "playMusic(\"%s\")"
  },
  {
    "arg0": [
      {
        "type": "field_dropdown",
        "name": "filename",
        "options": [
          [ "break", "break" ],
          [ "ogg file", "filename.ogg" ],
          [ "wav file", "filename.wav" ],
          [ "mp3 file", "filename.mp3" ],
          [ "open chest", "chestclosed" ],
          [ "close chest", "chestopen" ],
          [ "door open", "door_open" ],
          [ "door closed", "door_close" ],
          [ "click", "click" ],
          [ "trigger", "trigger" ],
          [ "splash", "splash" ],
          [ "Water", "water" ],
          [ "eat", "eat1" ],
          [ "explode", "explode1" ],
          [ "leveup", "levelup" ],
          [ "pop", "pop" ],
          [ "falldown", "fallbig1" ],
          [ "fire", "fire" ],
          [ "bow", "bow" ],
          [ "breath", "breath" ]
        ]
      }
    ],
    "message0": "play MP3 music file%1",
    "canRun": true,
    "colour": "#8f6d40",
    "previousStatement": true,
    "examples": [
      {
        "desc": "Stop after playing music",
        "code": "playSound(\"break\")\nwait(1)\nplaySound(\"click\")\n",
        "canRun": true
      }
    ],
    "helpUrl": "",
    "nextStatement": true,
    "type": "playSound",
    "category": "Sound",
    "func_description": "playSound(\"%s\")"
  }
]